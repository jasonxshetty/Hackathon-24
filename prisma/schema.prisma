//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Asset {
  id              String           @id() @default(uuid())
  symbol          String?
  name            String?
  type            String?
  currentPrice    String?
  riskFactor      String?
  sentimentScore  String?
  newss           News[]           @relation("asset")
  portfolioAssets PortfolioAsset[] @relation("asset")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Portfolio {
  id                      String                   @id() @default(uuid())
  name                    String?
  riskScore               String?
  totalValue              String?
  investorProfile         String?
  userId                  String?
  user                    User?                    @relation(fields: [userId], references: [id], name: "user")
  portfolioAssets         PortfolioAsset[]         @relation("portfolio")
  portfolioConfigurations PortfolioConfiguration[] @relation("portfolio")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now()) @updatedAt()
}

/// @@allow('all', true)
model News {
  id             String   @id() @default(uuid())
  headline       String?
  summary        String?
  sentimentScore String?
  publishedAt    String?
  assetId        String?
  asset          Asset?   @relation(fields: [assetId], references: [id], name: "asset")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Scenario {
  id          String   @id() @default(uuid())
  name        String?
  description String?
  parameters  Json?
  isCustom    Boolean
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PortfolioAsset {
  id            String     @id() @default(uuid())
  quantity      String?
  purchasePrice String?
  portfolioId   String?
  portfolio     Portfolio? @relation(fields: [portfolioId], references: [id], name: "portfolio")
  assetId       String?
  asset         Asset?     @relation(fields: [assetId], references: [id], name: "asset")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PortfolioConfiguration {
  id                 String     @id() @default(uuid())
  name               String?
  configuration      Json?
  simulatedRiskScore String?
  simulatedValue     String?
  portfolioId        String?
  portfolio          Portfolio? @relation(fields: [portfolioId], references: [id], name: "portfolio")
  userId             String?
  user               User?      @relation(fields: [userId], references: [id], name: "user")
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                      String                   @id() @default(uuid())
  name                    String?
  email                   String?                  @unique()
  pictureUrl              String?                  @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation         String?
  emailVerified           Boolean?
  status                  UserStatus               @default(VERIFIED)
  globalRole              String                   @default("USER")
  /// @password
  /// @omit
  password                String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now()) @updatedAt()
  accounts                Account[]
  sessions                Session[]
  portfolios              Portfolio[]              @relation("user")
  scenarios               Scenario[]               @relation("user")
  portfolioConfigurations PortfolioConfiguration[] @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
